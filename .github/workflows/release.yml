name: Build and Release

on:
  push:
    branches:
      - release

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: yarn

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Python Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r python/requirements.txt

      - name: Install Dependencies
        run: yarn install --frozen-lockfile

      - name: Build Application
        run: yarn build
        env:
          NODE_ENV: production
          STORAGE_KEY: ${{ secrets.STORAGE_KEY }}
          PATH: $PATH:${{ github.workspace }}/node_modules/.bin

      - name: Zip Dist
        run: zip -r dist.zip dist/

      - name: Get Version
        id: version
        run: |
          latest=$(gh release list --limit 1 | awk '{print $1}')
          if [[ -z "$latest" ]]; then
            echo "No previous release, using all commits"
            commits=$(git log --pretty=%B)
          else
            commits=$(git log ${latest}..HEAD --pretty=%B)
          fi

          ver=${latest#v}
          major=$(echo $ver | cut -d. -f1)
          minor=$(echo $ver | cut -d. -f2)
          patch=$(echo $ver | cut -d. -f3)

          commits=$(git log ${latest}..HEAD --pretty=%B)

          bump="patch"
          if echo "$commits" | grep -q "version(\(|!|:)"; then
            bump="major"
          elif echo "$commits" | grep -E -q "feature(\(|!|:)" ; then
            bump="minor"
          elif echo "$commits" | grep -E -q "fix(\(|:)" ; then
            bump="patch"
          fi

          if [[ "$bump" == "major" ]]; then
            major=$((major+1))
            minor=0
            patch=0
          elif [[ "$bump" == "minor" ]]; then
            minor=$((minor+1))
            patch=0
          else
            patch=$((patch+1))
          fi

          next="v${major}.${minor}.${patch}"
          echo "Next version: $next"
          echo "tag=$next" >> $GITHUB_OUTPUT
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Update package.json
        run: |
          ver="${{ steps.version.outputs.tag }}"
          ver="${ver#v}"

          jq --arg ver '.version = $ver' package.json > package.tmp.json
          mv package.tmp.json package.json

          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add package.json

          git commit -m "chore: bump version to ${{ steps.version.outputs.tag }}"
          git push
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.version.outputs.tag }}
          name: Release ${{ steps.version.outputs.tag }}
          body: "Automated release from release branch."
          files: dist.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
